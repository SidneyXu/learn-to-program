


Creating DTO’s (POJO’s/POCO’s)
—
—
—
—
—

val p: String by Delegates.lazy {
// compute the string
}


Lazy property
Extension Functions
Creating a singleton
If not null shorthand

11
val files = File("Test").listFiles()
println(files?.size)
val files = File("Test").listFiles()
println(files?.size ?: "empty")

val data = ...
val email = data["email"] ?: throw IllegalStateException("Email is missing!")
val data = ...
data?.let {
... // execute this block if not null
}




----------------------------------



backing field of a property, use the $ prefix
avoid use _ or m_ or other notation
if a function return unit, the return type should be ommitted


--------------------------------------



This Expression
—
—
To denote the current receiver, we use this expressions:
In a member of a class, this refers to the current object of that class
In an extension function or an extension function literal, this denotes the receiver parameter that is passed on the lefthand
side of a dot.
If this has no qualifiers, it refers to the innermost enclosing scope. To refer to this in other scopes, label qualifiers are
used:

Qualified this
To access this from an outer scope (a class, or extension function, or labeled extension function literal we write
this@label where @label is a label on the scope this is meant to be from:
class A { // implicit label @A
inner class B { // implicit label @B
fun Int.foo() { // implicit label @foo
val a = this@A // A's this
val b = this@B // B's this
val c = this // foo()'s receiver, an Int
val c1 = this@foo // foo()'s receiver, an Int
val funLit = @lambda {String.() ->
val d = this // funLit's receiver
val d1 = this@lambda // funLit's receiver
}
val funLit2 = { (s: String) ->
// foo()'s receiver, since enclosing function literal
// doesn't have any receiver
val d1 = this
}
}
}
}





Annotation Declaration

Builder


Function
//  Infix notation
//Functions can also be called using infix notations when
//They are member functions or extension functions
//They have a single parameter
// Define extension to Int
fun Int.shl(x: Int): Int {
    return x * 10
}
//// call extension function using infix notation
//1 shl 2
//// is the same as
//1.shl(2)







